{"ast":null,"code":"import React,{useState}from\"react\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function About(props){const[myStyle,setMyStyle]=useState({backgroundColor:'white',color:'black'});// const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\nconst changeMode=()=>{if(props.mode==='light'){setMyStyle({backgroundColor:'white',color:'black'});// setBtnText(\"Enable Dark Mode\");\n}else{setMyStyle({backgroundColor:`${props.color}`,color:\"white\",border:'1px solid white'});}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"container my-3 \",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"accordion\",id:\"accordionExample\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",style:myStyle,children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",style:myStyle,children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseOne\",\"aria-expanded\":\"true\",\"aria-controls\":\"collapseOne\",style:myStyle,children:\"What is your name?\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseOne\",className:\"accordion-collapse collapse show\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the first item's accordion body.\"}),\" It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",style:myStyle,children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseTwo\",\"aria-expanded\":\"false\",\"aria-controls\":\"collapseTwo\",style:myStyle,children:\"What's your academic qualification?\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseTwo\",className:\"accordion-collapse collapse\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the second item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-item\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"accordion-header\",children:/*#__PURE__*/_jsx(\"button\",{className:\"accordion-button collapsed\",type:\"button\",\"data-bs-toggle\":\"collapse\",\"data-bs-target\":\"#collapseThree\",\"aria-expanded\":\"false\",style:myStyle,\"aria-controls\":\"collapseThree\",children:\"What are your skills?\"})}),/*#__PURE__*/_jsx(\"div\",{id:\"collapseThree\",className:\"accordion-collapse collapse\",\"data-bs-parent\":\"#accordionExample\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"accordion-body\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"This is the third item's accordion body.\"}),\" It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \",/*#__PURE__*/_jsx(\"code\",{children:\".accordion-body\"}),\", though the transition does limit overflow.\"]})})]})]}),/*#__PURE__*/_jsx(\"div\",{})]}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary my-3 mx-3\",type:\"button\",onClick:changeMode,children:\"Click\"})]});}","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","About","props","myStyle","setMyStyle","backgroundColor","color","changeMode","mode","border","children","className","id","style","type","onClick"],"sources":["C:/React App/textutils/src/components/About.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About(props) {\r\n    \r\n\r\n    const [myStyle, setMyStyle] =  useState ({\r\n        backgroundColor : 'white',\r\n        color : 'black',\r\n    })\r\n\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n    const  changeMode = () =>{\r\n        if(props.mode === 'light'){\r\n            setMyStyle({\r\n            backgroundColor : 'white',\r\n            color : 'black',\r\n        })\r\n        // setBtnText(\"Enable Dark Mode\");\r\n    }\r\n    else{\r\n        setMyStyle({\r\n            backgroundColor : `${props.color}`,\r\n            color : \"white\",\r\n            border : '1px solid white'\r\n            })\r\n        }\r\n    }\r\n  return (\r\n    <>\r\n    <div className=\"container my-3 \">\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\" style={myStyle}>\r\n            <button\r\n              className=\"accordion-button\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n              style={myStyle}\r\n            >\r\n              What is your name?\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" >\r\n              <strong>This is the first item's accordion body.</strong> It is\r\n              shown by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n              style={myStyle}\r\n            >\r\n              What's your academic qualification?\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the second item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              style={myStyle}\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n              What are your skills?\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\">\r\n              <strong>This is the third item's accordion body.</strong> It is\r\n              hidden by default, until the collapse plugin adds the appropriate\r\n              classNamees that we use to style each element. These classNamees control\r\n              the overall appearance, as well as the showing and hiding via CSS\r\n              transitions. You can modify any of this with custom CSS or\r\n              overriding our default variables. It's also worth noting that just\r\n              about any HTML can go within the <code>.accordion-body</code>,\r\n              though the transition does limit overflow.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div>\r\n      </div>\r\n    </div>\r\n      <button className=\"btn btn-primary my-3 mx-3\" type=\"button\"  onClick={changeMode}>\r\n              Click\r\n            </button>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}